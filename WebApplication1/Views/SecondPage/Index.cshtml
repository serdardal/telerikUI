
@{
    ViewData["Title"] = "Index";
}

    <div style="margin-top:10px; height:100vh;">
        <div id="controlBox" style="width:19%; height:100%; float:left">
            <select id="templateNames" style="width: 100%; height: 35%; overflow-x: auto" multiple>
            </select>
            <button id="selectTemplate" onclick="handleSelectTemplate()">Open Template</button>

            <hr />

            <select id="savedFileNames" style="width:100%; height:35%; overflow-x:auto" multiple>
            </select>
            <button id="selectSavedFile" onclick="handleSelectSavedFile()">Open Saved File</button>
            <label>Readonly:</label>
            <input type="checkbox" checked id="readonlyCheckbox" />
        </div>
        <div style="width:80%; float:left">
            <button onclick="exportProtected()" id="exportProtectedButton" hidden>Export Protected</button>
            <div>
                <div style="float:left; margin-left:10px">
                    <label>Name:</label>
                    <input type="text" id="nameInput">
                </div>
                <div style="float:left; margin-left:10px">
                    <label>Date:</label>
                    <input type="date" id="dateInput" data-date-format="DD MMMM YYYY">
                </div>
                <button onclick="handleSaveButton()" style="margin-left: 10px" id="saveButton">Save</button>
                <button onclick="handleUpdateButton()" style="margin-left: 10px" id="updateButton" hidden>Update</button>
                <div id="spreadsheet" style="float:left; width:100%"></div>
            </div>
        </div>
    </div>
    <div style="margin-top:10px">
        <p>Kaydete basıldığında açılan tablodaki hücre bazında değişiklikler backende gönderilir.</p>
        <p>Kayıt edilen dosyaların isimleri databaseden çekilir.</p>
        <p>Saves klasörü artık kullanılmıyor. Değişiklikler database e kaydedilir.</p>
        <p>Kayıt edilen bir dosya açıldığında databasedeki veriler ile dosyanın şablonu birleştirilerek ekranda gösterilir.</p>
        <p>Update yapıldığında hücre bazında değişiklikler backende gönderilir ve databasede update edilir.</p>
    </div>

<script>
    $("#spreadsheet").kendoSpreadsheet({
        render: function (e) {
            var height = window.innerHeight;
            e.sender.element.innerHeight(height-100);
        },
        excel: {
            proxyURL: '@Url.Action("SaveFileToTemp", "SecondPage")',
            forceProxy: true
        },
        excelExport: function (e) {
            var fileName = $("#nameInput").val();
            if (currentTemplateName !== "") {
                fileName = currentTemplateName.replace(".xlsx", "") + "_" + $("#nameInput").val() + "_" + $("#dateInput").val();
            }
            e.workbook.fileName = fileName;
        },
    });
    var spread = $('#spreadsheet').getKendoSpreadsheet();
    var cells;
    var currentTemplateName;

    $.ajax({
        url: '/SecondPage/GetTemplateNames',
        method: "get",
        success: function (data) {
            loadTemplateNames(data)
        }
    })

    $.ajax({
        url: '/SecondPage/GetSavedFileNamesFromDB',
        method: "get",
        success: function (data) {
            loadSavedFileNames(data)
        }
    })

    function loadTemplateNames(names) {
        names.map((name) => {
            var option = document.createElement("option");
            option.text = name;
            $('#templateNames').append(option);
        })
    }

    function loadSavedFileNames(names) {
        names.map((name) => {
            var option = document.createElement("option");
            option.text = name;
            $('#savedFileNames').append(option);
        })
    }

    function handleSelectTemplate() {
        var selected = $('#templateNames option:selected').val()
        openTemplate(selected);
    }

    function handleSelectSavedFile() {
        var readonly = $("#readonlyCheckbox").is(":checked")
        var selected = $('#savedFileNames option:selected').val()
        if (readonly) {
            openSavedFileReadOnly(selected)
            $('#updateButton').hide()
        } else {
            openSavedFileEditMode(selected)
            $('#updateButton').show()
        }

        currentTemplateName = "";

        $('#nameInput').val(selected);
        $('#nameInput').prop('disabled', true);

        $('#dateInput').prop('disabled', true);

        $('#saveButton').hide()
        $('#exportProtectedButton').show()
    }

    function openTemplate(name) {
        $.ajax({
            url: '/SecondPage/GetTemplateByName/'+name,
            method: "get",
            success: function (data) {
                spread.fromFile(b64toBlob(data)).then(() => lockAllCells()).then(() => unlockCells(name,true));
            }
        })

        currentTemplateName = name;

        $('#nameInput').val("");
        $('#nameInput').prop('disabled', false);

        $('#dateInput').prop('disabled', false);

        $('#saveButton').show()
        $('#updateButton').hide()
        $('#exportProtectedButton').hide()
    }

    function openSavedFileReadOnly(name) {
        $.ajax({
            url: '/SecondPage/GetSavedFileByName/'+name,
            method: "get",
            success: function (data) {
                spread.fromFile(b64toBlob(data)).then(() => lockAllCells());
            }
        })
    }

    function openSavedFileEditMode(name) {
        $.ajax({
            url: '/SecondPage/GetSavedFileByName/'+name,
            method: "get",
            success: function (data) {
                spread.fromFile(b64toBlob(data)).then(() => lockAllCells()).then(() => unlockCells(name,false));
            }
        })
    }

    function b64toBlob(dataURI) {
	    var byteString = atob(dataURI.split(',')[1]);
	    var ab = new ArrayBuffer(byteString.length);
	    var ia = new Uint8Array(ab);

	    for (var i = 0; i < byteString.length; i++) {
		    ia[i] = byteString.charCodeAt(i);
	    }

	    return new Blob([ab], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
    }

    function lockAllCells() {
        var sheetList = spread.sheets();
        for (var i = 0; i < sheetList.length; i++) {
            var sheet = sheetList[i];
            var range = sheet.range("A1:AX200");
            range.enable(false);
        }

    }

    function unlockCells(docName, isTemplate) {
        var data = { documentName: docName, isTemplate: isTemplate };

        $.ajax({
            url: '/SecondPage/GetUnlockedCells/',
            method: "post",
            contentType: "application/json",
            data: JSON.stringify(data),
            success: function (datas) {

                cells = datas.dataCells;

                var sheetList = spread.sheets();

                for (var k = 0; k < sheetList.length; k++) {
                    var cellList = datas.dataCells[k].cellList;
                    var sheet = sheetList[k];

                    for (var i = 0; i < cellList.length; i++) {
                        var range = sheet.range(cellList[i].rowIndex-1, cellList[i].columnIndex-1)
                        range.enable(true);
                    }
                }

                for (var k = 0; k < sheetList.length; k++) {
                    var cellList = datas.onlyUnlockCells[k].cellList;
                    var sheet = sheetList[k];

                    for (var i = 0; i < cellList.length; i++) {
                        var range = sheet.range(cellList[i].rowIndex-1, cellList[i].columnIndex-1)
                        range.enable(true);
                    }
                }
                
            }
        })

    }

    function handleSaveButton() {
        var res = checkCells();
        if (res) {
            spread.saveAsExcel();
        }
    }

    function handleUpdateButton() {
        var res = checkCells();
        if (res) {
            spread.saveAsExcel();
        }
    }

    function exportProtected() {
        var docName = $("#nameInput").val();
        $.ajax({
            url: '/SecondPage/GetProtectedSavedFileByName/' + docName,
            method: "get",
            success: function (data) {
                const element = document.createElement('a');
                element.download = docName;
                element.href = URL.createObjectURL(b64toBlob(data));
                element.click();
            }
        })
    }

    function checkCells() {
        var sheetList = spread.sheets();

        for (var i = 0; i < cells.length; i++) {
            var dataTable = cells[i];
            var dataCellList = dataTable.cellList;

            var sheet = sheetList[i];

            for (var j = 0; j < dataCellList.length; j++) {
                var currentDataCell = dataCellList[j];
                var currentSheetCellRange = sheet.range(currentDataCell.rowIndex - 1, currentDataCell.columnIndex - 1);
                if (currentDataCell.format !== currentSheetCellRange.format()) {
                    window.alert("Wrong cell format: row: " + currentDataCell.rowIndex + " column: "+ currentDataCell.columnIndex + " expected: " + currentDataCell.format + " found: "+ currentSheetCellRange.format())
                    return false;
                }

            }
        }

        return true;
    }

</script>

