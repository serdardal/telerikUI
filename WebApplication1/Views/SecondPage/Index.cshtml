@model WebApplication1.Models.IndexModel

@{
    ViewData["Title"] = "Index";
}

    <div style="margin-top:10px; height:100vh;">
        @* sol taragtaki seçim bölgesi *@
        <div id="controlBox" style="width:19%; height:100%; float:left">
            <select id="templateNames" style="width: 100%; height: 35%; overflow-x: auto" multiple>
            </select>
            <button id="selectTemplate" onclick="handleSelectTemplate()">Open Template</button>

            <hr />

            <select id="savedFileNames" style="width:100%; height:35%; overflow-x:auto" multiple>
            </select>
            <button id="selectSavedFile" onclick="handleSelectSavedFile()">Open Saved File</button>
            <label>Readonly:</label>
            <input type="checkbox" checked id="readonlyCheckbox" />
            <button id="openInNewTabButton" onclick="handleOpenInNewTab()">Open In New Tab</button>
        </div>
        <div style="width:80%; float:left">
            <button onclick="exportProtected()" id="exportProtectedButton" hidden>Export Protected</button>
            <label id="changePicLabel" hidden>ChangePicture:</label>
            <input type="checkbox" id="changePicCheckbox" hidden/>
            <div>
                <div style="float:left; margin-left:10px">
                    <label>Name:</label>
                    <input type="text" id="nameInput">
                </div>
                <div style="float:left; margin-left:10px">
                    <label>Date:</label>
                    <input type="date" id="dateInput" data-date-format="DD MMMM YYYY">
                </div>
                <button onclick="handleSaveButton()" style="margin-left: 10px" id="saveButton">Save</button>
                <button onclick="handleUpdateButton()" style="margin-left: 10px" id="updateButton" hidden>Update</button>
                <div id="spreadsheet" style="float:left; width:100%"></div>
            </div>
        </div>
    </div>

<script>
    $("#spreadsheet").kendoSpreadsheet({
        render: function (e) {
            var height = window.innerHeight;
            e.sender.element.innerHeight(height-100);
        },
        excel: {
            proxyURL: '@Url.Action("SaveFileToTemp", "SecondPage")',
            forceProxy: true
        },
        excelExport: function (e) {
            var fileName = $("#nameInput").val();
            if (currentTemplateName !== "") {
                fileName = currentTemplateName.replace(".xlsx", "") + "_" + $("#nameInput").val() + "_" + $("#dateInput").val();
            }
            e.workbook.fileName = fileName;
        },
        paste: function (e) {
            // yapıştırılırken sadece değerin yapıştırılması, formatın bozulmaması
            e.preventDefault()

            var currentRange = e.range;
            var fullData = e.clipboardContent.data;
            var mergedCells = e.clipboardContent.mergedCells;
            var topLeft = currentRange.topLeft();
            var initialRow = topLeft.row;
            var initialCol = topLeft.col;
            var origRef = e.clipboardContent.origRef;
            var numberOfRows = origRef.bottomRight.row - origRef.topLeft.row + 1;
            var numberOfCols = origRef.bottomRight.col - origRef.topLeft.col + 1;
            var spread = e.sender;
            var sheet = spread.activeSheet();
            var rangeToPaste =  sheet.range(initialRow, initialCol, numberOfRows, numberOfCols);

            sheet.batch(function() {
                for(var i = 0; i < fullData.length; i += 1) {
                    var currentFullData = fullData[i];

                    for(var j = 0; j < currentFullData.length; j += 1 ) {
                        var range = sheet.range(initialRow + i, initialCol + j);
                        var value = currentFullData[j].value;

                        if (value !== null) {
                            range.input(value);
                        }
                    }
                }
            });

            sheet.select(rangeToPaste);

            for(var i = 0; i < mergedCells.length; i += 1) {
                var initialMergedRange = sheet.range(mergedCells[i]);
                var mergeTopLeft = initialMergedRange.topLeft();
                var mergeInitialRow = mergeTopLeft.row + initialRow;
                var mergedInitialCol = mergeTopLeft.col + initialCol;
                var mergedNumberOfRows = initialMergedRange.values.length;
                var mergedNumberOfCols = initialMergedRange.values()[0].length;

                sheet.range(mergeInitialRow, mergedInitialCol, mergedNumberOfRows, mergedNumberOfCols).merge();
            }
        },
        change: onChange,
    });
    var spread = $('#spreadsheet').getKendoSpreadsheet();
    var dataCellTables;
    var notNullCellTables;
    var currentTemplateName;
    var endMarks;
    var customFormattedCellTables;

    kendo.culture("tr-TR");


    //şablon isimlerinin soldaki select içerisine doldurulması
    $.ajax({
        url: '/SecondPage/GetTemplateNames',
        method: "get",
        success: function (data) {
            loadTemplateNames(data)
        }
    })

    //önceden kayıt edilmiş tabloların isimlerinin soldaki select içerisine doldurulması
    $.ajax({
        url: '/SecondPage/GetSavedFileNamesFromDB',
        method: "get",
        success: function (data) {
            loadSavedFileNames(data)
        }
    })

    if ("@Model.OpenInNewTab" === "True") {
        
        if ("@Model.ReadOnly" === "True") {
            openSavedFileReadOnly("@Model.FileName");
            $('#updateButton').hide();
            $('#exportProtectedButton').show();
            $('#changePicCheckbox').show()
            $('#changePicLabel').show()
        } else {
            openSavedFileEditMode("@Model.FileName");
            $('#updateButton').show()
            $('#exportProtectedButton').hide();
            $('#changePicCheckbox').hide()
            $('#changePicLabel').hide()
        }

        currentTemplateName = "";

        $('#nameInput').val("@Model.FileName");
        $('#nameInput').prop('disabled', true);

        $('#dateInput').prop('disabled', true);

        $('#saveButton').hide()

    }

    function loadTemplateNames(names) {
        names.map((name) => {
            var option = document.createElement("option");
            option.text = name;
            $('#templateNames').append(option);
        })
    }

    function loadSavedFileNames(names) {
        names.map((name) => {
            var option = document.createElement("option");
            option.text = name;
            $('#savedFileNames').append(option);
        })
    }

    function handleSelectTemplate() {
        var selected = $('#templateNames option:selected').val()
        openTemplate(selected);

        currentTemplateName = selected;

        $('#nameInput').val("");
        $('#nameInput').prop('disabled', false);

        $('#dateInput').prop('disabled', false);

        $('#saveButton').show()
        $('#updateButton').hide()
        $('#exportProtectedButton').hide()

        $('#changePicCheckbox').hide()
        $('#changePicLabel').hide()
    }

    function handleSelectSavedFile() {
        var readonly = $("#readonlyCheckbox").is(":checked")
        var selected = $('#savedFileNames option:selected').val()
        if (readonly) {
            openSavedFileReadOnly(selected);
            $('#updateButton').hide();
            $('#exportProtectedButton').show();
            $('#changePicCheckbox').show()
            $('#changePicLabel').show()
        } else {
            openSavedFileEditMode(selected)
            $('#updateButton').show()
            $('#exportProtectedButton').hide();
            $('#changePicCheckbox').hide()
            $('#changePicLabel').hide()
        }

        currentTemplateName = "";

        $('#nameInput').val(selected);
        $('#nameInput').prop('disabled', true);

        $('#dateInput').prop('disabled', true);

        $('#saveButton').hide()
    }

    function getData(ajaxUrl) { 
        return $.ajax({
            url: ajaxUrl,
            method: "get",
        });
    };

    function postData(ajaxUrl, data) {
        return $.ajax({
            url: ajaxUrl,
            method: "post",
            contentType: "application/json",
            data: JSON.stringify(data),
        });
    }

    async function openTemplate(name) {
        var url = '/SecondPage/GetTemplateByName/' + name;

        try {
            var response = await getData(url);
            await spread.fromFile(b64toBlob(response));
            lockAllCells();
            await unlockCells(name, true);
        }
        catch (err) {
            console.log(err);
        }
    }

    async function openSavedFileReadOnly(name) {
        var url = '/SecondPage/GetSavedFileByName/' + name;
        var customCellsUrl = '/SecondPage/GetCustomFormattedCellsByName/' + name;

        try {
            var response = await getData(url);
            await spread.fromFile(b64toBlob(response));
            lockAllCells();
            var customCellsResponse = await getData(customCellsUrl);
            customFormattedCellTables = customCellsResponse;
            colorCustomFormattedCells();
        }
        catch (err)
        {
            console.log(err);
        }
    }

    async function openSavedFileEditMode(name) {
        var url = '/SecondPage/GetSavedFileByName/' + name;

        try {
            var response = await getData(url);
            await spread.fromFile(b64toBlob(response));
            lockAllCells();
            await unlockCells(name, false);
            colorCustomFormattedCells();
        }
        catch (err)
        {
            console.log(err);
        }
    }

    function b64toBlob(dataURI) {
	    var byteString = atob(dataURI.split(',')[1]);
	    var ab = new ArrayBuffer(byteString.length);
	    var ia = new Uint8Array(ab);

	    for (var i = 0; i < byteString.length; i++) {
		    ia[i] = byteString.charCodeAt(i);
	    }

	    return new Blob([ab], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
    }

    function lockAllCells() {
        //A1 den CX200 e kadar olan celler disable edilir.
        var sheetList = spread.sheets();
        for (var i = 0; i < sheetList.length; i++) {
            var sheet = sheetList[i];
            var range = sheet.range("A1:CX200");
            range.enable(false);
        }

    }

    async function unlockCells(docName, isTemplate) {
        var data = { documentName: docName, isTemplate: isTemplate };

        await $.ajax({
            url: '/SecondPage/GetUnlockedCells/',
            method: "post",
            contentType: "application/json",
            data: JSON.stringify(data),
            success: function (datas) {
                var sheetList = spread.sheets();

                //merge olmayan data hücrelerin enable edilmesi
                for (var k = 0; k < sheetList.length; k++) {
                    var cellList = datas.notMergedDataCellTables[k].cellList;
                    var sheet = sheetList[k];

                    for (var i = 0; i < cellList.length; i++) {
                        //Telerik Spreadsheets hücre indexleri 0 dan başlıyor fakat EPPlus'ta 1 den başlıyor
                        //bu nedenle 1 çıkarıyoruz.
                        var range = sheet.range(cellList[i].rowIndex-1, cellList[i].columnIndex-1)
                        range.enable(true);
                    }
                }

                //merge edilmiş data hücrelerin enable edilmesi
                //sadece veri yazılacak hücreyi (sol üst hücre) enable etmek yeterli olmuyor.
                //merge edilmiş tüm hücrelerin enable edilmesi gerekiyor.
                var mergedTables = datas.mergedRangesTables;

                for (var k = 0; k < sheetList.length; k++) {
                    var mergedAddressList = mergedTables[k].mergedCellList;
                    var sheet = sheetList[k];

                    for (var i = 0; i < mergedAddressList.length; i++) {
                        var range = sheet.range(mergedAddressList[i])
                        range.enable(true);
                    }
                }

                //ship particular hücrelerin disable edilmesi
                var shipParticularCells = datas.shipParticularCellTables;
                lockShipParticularCells(shipParticularCells);

                //değişkenlerin atanması
                dataCellTables = datas.notMergedDataCellTables;
                for (var i = 0; i < dataCellTables.length; i++) {
                    dataCellTables[i].cellList = dataCellTables[i].cellList.concat(datas.mergedDataCellTables[i].cellList);
                }
                notNullCellTables = datas.notNullCellTables;
                endMarks = datas.endMarks;
                customFormattedCellTables = datas.customFormattedCellTables;
            }
        })

    }

    function lockShipParticularCells(shipParticularCells) {
        var sheetList = spread.sheets();

        for (var i = 0; i < sheetList.length; i++) {
            var sheet = sheetList[i];
            var shipParticularCellList = shipParticularCells[i].cellList;

            for (var j = 0; j < shipParticularCellList.length; j++) {
                var range = sheet.range(shipParticularCellList[j].rowIndex - 1, shipParticularCellList[j].columnIndex - 1)
                range.enable(false);
            }
        }
    }

    function handleSaveButton() {
        var res = checkCells();
        if (res) {
            spread.saveAsExcel();
        }
    }

    function handleUpdateButton() {
        var res = checkCells();
        if (res) {
            spread.saveAsExcel();
        }
    }

    async function exportProtected() {
        var docName = $("#nameInput").val();
        var coloredCells = getColoredCells()
        var url = '/SecondPage/GetProtectedSavedFileByName/';

        var change = $("#changePicCheckbox").is(":checked");

        var data = { fileName: docName, changePic: change, coloredCellList: coloredCells}

        try {
            var response = await postData(url, data);
            const element = document.createElement('a');
            element.download = docName;
            element.href = URL.createObjectURL(b64toBlob(response));
            element.click();
        }
        catch (err) {
            console.log(err);
        }
    }

    function checkCells() {
        var sheetList = spread.sheets();
        var valid = true;
        var invalidCellList = [];

        for (var i = 0; i < sheetList.length; i++) {
            var sheet = sheetList[i];
            var range = sheet.range('A1:JX300');

            if (endMarks.length > 0) {
                var rowIndex = endMarks[i].rowIndex;
                var columnIndex = endMarks[i].columnIndex;
                range = sheet.range(0, 0, rowIndex, columnIndex);
            }

            range.forEachCell(function (row, column, cell) {
                if (cell.validation && !cell.validation.value) {
                    if (valid) valid = false;

                    invalidCellList.push({
                        sheetIndex : i,
                        row : row,
                        column : column
                    })
                }
            });
        }

        if (!valid) {
            var alertMessage = "These cells have invalid values: \n\n";

            for (var i = 0; i < invalidCellList.length; i++) {
                var invalidCell = invalidCellList[i];
                var message = "sheet index: " + invalidCell.sheetIndex + ", row: " + invalidCell.row + ", column: " + invalidCell.column + "\n";
                alertMessage += message;
            }

            window.alert(alertMessage);
        }

        return valid;
    }

    function onChange(arg) {
        var range = arg.range;
        var sheetList = spread.sheets();
        var currentSheet = spread.activeSheet();
        var currentSheetIndex;

        for (let i = 0; i < sheetList.length; i++) {
            var list = sheetList[i];
            if (list === currentSheet) currentSheetIndex = i;
        }

        if (currentSheetIndex >= 0) {
            checkCustomFormattedCells(range, currentSheetIndex);
        }
        
    }

    function checkCustomFormattedCells(range, currentSheetIndex) {
        range.forEachCell(function (row, column, cell) {
            var currentCustomFormattedCellSheet = customFormattedCellTables[currentSheetIndex];
            for (let i = 0; i < currentCustomFormattedCellSheet.cellList.length; i++) {
                var currentCustomFormattedCell = currentCustomFormattedCellSheet.cellList[i];
                //eger değiştirilen range içerisinde custom format verilmiş cell var ise
                if (currentCustomFormattedCell.rowIndex === row+1 && currentCustomFormattedCell.columnIndex === column+1) {
                    console.log(`Değer değişti! Row: ${row + 1}, Column: ${column + 1}, Yeni Değer: ${cell.value}`);

                    var conditions = currentCustomFormattedCell.format.split(";");
                    for (let i = 0; i < conditions.length; i++) {
                        var currentCondition = conditions[i];
                        if (currentCondition.startsWith("[")) {
                            var response = isFullfillsTheCondition(cell.value, currentCondition);
                            //conditionun sağlanıyor olması istenmeyen bir durum o yüzden renklendir
                            if (response.fullfills) {
                                colorCell(currentSheetIndex, row, column, response.color);
                                break;
                            } else {
                                colorCell(currentSheetIndex, row, column, "white");
                            }
                        }
                    }
                }
            }
        });
    }

    function colorCell(sheetIndex, rowIndex, columnIndex, color) {
        var sheetList = spread.sheets();
        var sheet = sheetList[sheetIndex];

        sheet.range(rowIndex, columnIndex).background(color);
    }

    function isFullfillsTheCondition(value, condition) {
        var firstSquareBracketOpenIndex = condition.indexOf("[");
        var firstSquareBracketCloseIndex = condition.indexOf("]", firstSquareBracketOpenIndex);
        var secondSquareBracketOpenIndex = condition.indexOf("[", firstSquareBracketCloseIndex);
        var secondSquareBracketCloseIndex = condition.indexOf("]", secondSquareBracketOpenIndex);

        var conditionContent = condition.substring(secondSquareBracketOpenIndex +1, secondSquareBracketCloseIndex);
        var conditionNumber;
        if (conditionContent.startsWith(">=")) {
            conditionNumber = condition.substring(secondSquareBracketOpenIndex + 3, secondSquareBracketCloseIndex);
            if (value >= Number(conditionNumber)) {
                return { fullfills: true, color: "yellow" };
            }
        }
        else if (conditionContent.startsWith("<=")) {
            conditionNumber = condition.substring(secondSquareBracketOpenIndex + 3, secondSquareBracketCloseIndex);
            if (value <= Number(conditionNumber)) {
                return { fullfills: true, color: "yellow" };
            }
        }
        else if (conditionContent.startsWith(">")){
            conditionNumber = condition.substring(secondSquareBracketOpenIndex + 2, secondSquareBracketCloseIndex);
            if (value > Number(conditionNumber)) {
                return { fullfills: true, color: "yellow" };
            }
        }
        else if (conditionContent.startsWith("<")){
            conditionNumber = condition.substring(secondSquareBracketOpenIndex + 2, secondSquareBracketCloseIndex);
            if (value < Number(conditionNumber)) {
                return { fullfills: true, color: "yellow" };
            }
        }
        else if (conditionContent.startsWith("=")){
            conditionNumber = condition.substring(secondSquareBracketOpenIndex + 2, secondSquareBracketCloseIndex);
            if (value === Number(conditionNumber)) {
                return { fullfills: true, color: "yellow" };
            }
        }

        // ileride condition rengine göre renk döndürebilir. şimdilik sarı döndürüyor.
        return {fullfills: false, color:"yellow"};
    }

    function colorCustomFormattedCells() {
        var sheetList = spread.sheets();

        for (let i = 0; i < customFormattedCellTables.length; i++) {
            var currentTable = customFormattedCellTables[i];
            var currentSheetList = sheetList[i];

            for (let j = 0; j < currentTable.cellList.length; j++) {
                var cell = currentTable.cellList[j];
                var range = currentSheetList.range(cell.rowIndex - 1, cell.columnIndex - 1);
                checkCustomFormattedCells(range, i);
            }
        }
    }

    function getColoredCells() {
        var coloredCells = [];
        var sheetList = spread.sheets();

        for (let i = 0; i < customFormattedCellTables.length; i++) {
            var table = customFormattedCellTables[i];
            var sheet = sheetList[i];

            for (let j = 0; j < table.cellList.length; j++) {
                var cell = table.cellList[j];
                var range = sheet.range(cell.rowIndex -1 , cell.columnIndex -1);
                var conditions = cell.format.split(";");

                for (let k = 0; k < conditions.length; k++) {
                        var currentCondition = conditions[k];
                        if (currentCondition.startsWith("[")) {
                            var response = isFullfillsTheCondition(range.values()[0][0], currentCondition);
                            //conditionun sağlanıyor olması istenmeyen bir durum o yüzden renklendir
                            if (response.fullfills) {
                                coloredCells.push({
                                    sheetIndex : i,
                                    rowIndex : cell.rowIndex,
                                    columnIndex : cell.columnIndex,
                                    color : response.color
                                });
                                break;
                            }
                        }
                    }
            }
        }

        return coloredCells;
    }

    function handleOpenInNewTab() {
        var selected = $('#savedFileNames option:selected').val();
        if (selected !== undefined) {
            var readonly = $("#readonlyCheckbox").is(":checked")

            var url = '/SecondPage/OpenFileReadonlyInNewTab/' + selected + '/' + readonly;
            window.open(url, '_blank');
        }
    }

</script>

